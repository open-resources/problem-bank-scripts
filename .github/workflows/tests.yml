
name: Tests

on:
  push:
    branches: [main]
    paths:
      - "tests/**"
      - "src/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/tests.yml"
  pull_request:
    branches: [main]
    paths:
      - "tests/**"
      - "src/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/tests.yml"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
#   schema:
#     outputs:
#       invalid: ${{ steps.check-schema.outputs.invalid }}
#       schema: ${{ steps.check-schema.outputs.schema }}
#     runs-on: ubuntu-latest
#     concurrency:
#       group: schema-${{ github.ref }}
#       cancel-in-progress: true
#     steps:
#       - uses: actions/checkout@v3
#       - name: Download latest info.json schema
#         run: |
#           curl -sSL https://raw.githubusercontent.com/PrairieLearn/PrairieLearn/master/apps/prairielearn/src/schemas/schemas/infoQuestion.json > latestSchema.json
#       - name: Check schema
#         id: check-schema
#         run: |
#           echo "schema=latestSchema.json" >> "$GITHUB_OUTPUT"
#           diff latestSchema.json tests/infoSchema.json
#           if [ $? -eq 0 ]; then
#             echo "invalid=false" >> "$GITHUB_OUTPUT"
#             exit 0
#           else
#             echo "invalid=true" >> "$GITHUB_OUTPUT"
#             exit 0
#           fi
#       - name: Comment if out of date
#         if: ${{ steps.check-schema.outputs.invalid == 'true' }}
#         uses: actions/github-script@v6
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             core.warning(
#               "The info.json schema is out of date. Please update it to match the latest schema from PrairieLearn.",
#               {
#                 title: "Schema out of date",
#                 file: "tests/infoSchema.json",
#               }
#             );


  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.12"
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: poetry
      - name: Install dependencies
        run: |
          poetry install -E tests
      - name: Run tests
        run: |
          poetry run pytest tests
      - name: Upload generated files
        if: failure() && matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: test-generated-files-${{ github.event_name }}
          path: tests/test_question_templates/question_generated_outputs/
          if-no-files-found: ignore
          retention-days: 5
